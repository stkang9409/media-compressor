name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            pkg-config

      - name: Install frontend dependencies
        run: npm install

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Media Compressor ${{ github.ref_name }}'
          releaseBody: |
            ## 📥 다운로드 가이드 / Download Guide
            
            ### 🪟 Windows
            - **파일명**: `media-compressor_버전_x64-setup.exe`
            - **설치방법**: 다운로드 후 실행하여 설치
            - **예시**: `media-compressor_0.1.0_x64-setup.exe`
            
            ### 🍎 macOS
            **Intel Mac (x64)**
            - **파일명**: `media-compressor_버전_x64.dmg`
            - **예시**: `media-compressor_0.1.0_x64.dmg`
            
            **Apple Silicon (M1/M2/M3)**
            - **파일명**: `media-compressor_버전_aarch64.dmg`
            - **예시**: `media-compressor_0.1.0_aarch64.dmg`
            - **설치방법**: DMG 파일을 열고 앱을 Applications 폴더로 드래그
            
            ### 🐧 Linux
            **AppImage (모든 배포판)**
            - **파일명**: `media-compressor_버전_amd64.AppImage`
            - **설치방법**: 
              ```bash
              chmod +x media-compressor_*.AppImage
              ./media-compressor_*.AppImage
              ```
            
            **Debian/Ubuntu (.deb)**
            - **파일명**: `media-compressor_버전_amd64.deb`
            - **설치방법**: 
              ```bash
              sudo dpkg -i media-compressor_*.deb
              ```
            
            ---
            
            ## ✨ 주요 기능 / Features
            - 🖼️ **이미지 압축**: JPEG, PNG, WebP 지원
            - 🎥 **비디오 압축**: FFmpeg 자동 다운로드 기능 포함
            - 🚀 **빠른 처리 속도**: Rust 기반 네이티브 성능
            - 💾 **일괄 처리**: 여러 파일 동시 압축
            - 🔄 **드래그 앤 드롭**: 간편한 파일 추가
            
            ## 🔧 문제 해결 / Troubleshooting
            
            ### macOS에서 "개발자를 확인할 수 없음" 오류
            ```bash
            # 터미널에서 실행:
            xattr -cr /Applications/media-compressor.app
            ```
            
            ### Linux에서 실행 권한 문제
            ```bash
            chmod +x media-compressor_*.AppImage
            ```
            
            ### FFmpeg 관련
            - 비디오 압축 시 FFmpeg이 필요합니다
            - 앱이 자동으로 다운로드를 제안합니다
            - 수동 설치: https://ffmpeg.org/download.html
            
            ## 📖 더 알아보기 / Learn More
            - [사용 설명서](https://github.com/stkang9409/media-compressor#readme)
            - [문제 신고](https://github.com/stkang9409/media-compressor/issues)
            - [소스 코드](https://github.com/stkang9409/media-compressor)
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

  build-status:
    needs: build-tauri
    runs-on: ubuntu-latest
    steps:
      - name: Build Complete
        run: echo "All builds completed successfully!"